[
  {
    "path": "posts/2020-12-07-searching-from-r/",
    "title": "Searching from R",
    "description": "'Utilize advanced searching techniques to quickly launch a search from R'",
    "author": [
      {
        "name": "Jimmy Briggs",
        "url": "https://github.com/jimbrig"
      }
    ],
    "date": "2020-12-07",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nYour Mind is a CPU\r\n\r\nSearching from R\r\nIdentifying an Opportunity\r\nReviewing Current Processes\r\nDeveloping a Solution\r\nSetting up the Search Engines\r\nExamples\r\n\r\nR Code\r\nGeneral Search Engine\r\nSearch Github\r\nRseek.org\r\nSearch R Site via Finzi\r\nSearch Nabble R Forum\r\nSearch Google\r\nSearch R Project Domain via Google\r\nSearch METACRAN\r\n\r\nConcluding Remarks\r\n\r\n\r\n\r\n  function codefolder(query) {\r\n\r\n    var x = document.querySelectorAll(query);\r\n    if (x.length === 0) return;\r\n\r\n    function toggle_vis(o) {\r\n      var d = o.style.display;\r\n      o.style.display = (d === 'block' || d === '') ? 'none':'block';\r\n    }\r\n\r\n    for (i = 0; i < x.length; i++) {\r\n      var y = x[i];\r\n      toggle_vis(y);\r\n    }\r\n\r\n    var elem = document.getElementById(\"codefolder-button\");\r\n    if (elem.value === \"Hide Code\") elem.value = \"Show Code\";\r\n    else elem.value = \"Hide Code\";\r\n  }\r\n\r\n  window.addEventListener('load', function () {\r\n    codefolder('d-code');\r\n  });\r\n\r\nIntroduction\r\nSkip to the R code examples.\r\nProgrammers are good at engineering software and designing web applications. I argue that we can apply the same logic to facilitate an environment which provides a natural, orchestrated flow between the various activities we undertake, both online and in the console.\r\nIn this post I use searching the web, a process developers rely on heavily for many different reasons, as a basic example of an area for improvement.\r\nI will show you some examples of querying specific search engines directly from your R console as well as provide some pre-configured functions for some of my most common use-cases.\r\nBefore showcasing the code, first I want to bring to light some ideas surrounding our daily workflows as developers and how we interact with the web.\r\nYour Mind is a CPU\r\n\r\n“The optimal number of threads in any system is one thread.” - Scott Hanselman\r\n\r\nThink of your mind as a CPU (central processing unit) like that on your computer. Each separate task you pursue throughout the day relies on a limited amount of resources, which can be thought of as your bank of availableRandom Access Memory, or RAM.\r\nFrom this perspective, the idea of multi-tasking becomes multi-threading, and as developers we all know that for computers to run asynchronous, parallel, multi-threaded processes requires a highly intricate, well designed, and deeply thought out infrastructure to work properly without overloading the CPU and crashing the machine.\r\nSimilarly, switching contexts between different digital environments causes your mind to have to continuously re-adjust and reboot its underlying resources in order to facilitate the influx of new information in need of being processed.\r\nIn other words, it takes time, energy, and resources to get your mind to focus, and every time we switch tasks or contexts, we lose energy that wouldn’t have been lost if we had just stayed in one context initially. The fatigue that builds up from all of this energy loss can potentially demotivate us, as well as cause mental burnout.\r\nProgrammers should strive to reach a state of flow in which complete focus can be given to one activity.\r\nThis requires determination and discipline in order to keep that focus streamlined as well as a proper environment which motivates focus instead of scattered, distracted thought.\r\nThe solution to avoiding burnout and unproductive programming habits is to provide an ecosystem where context switching is minimized and when needed, streamlined.\r\nSearching from R\r\nIdentifying an Opportunity\r\nHave you ever wanted to search google directly from R? What about query your organizations Github repos or search for packages on your respective CRAN mirror?\r\nThis thought never crossed my mind until I took a second to think about the potential benefits of constructing a system for implementing this in R.\r\nThe problem I found was two-fold:\r\nSearching the web for R specific resources can be frustrating, time-consuming, and difficult.\r\nThe process of switching contexts from R to the browser is unproductive and breaks my natural development flow.\r\nIdentifying these issues, I took it as an opportunity to create something new, and potentially beneficial to others as we developers love to do.\r\nReviewing Current Processes\r\nAlthough most R developers are extensively familiar with The DRY Principle (Don’t repeat yourself) in programming, many do not attempt to extend the principle outside of their code.\r\nThinking on the principle further, I realized that the amount of time developers interact with the web through a web browser interface is much larger than we may think and is only growing as our dependence on online services and learning resources increase exponentially.\r\nFor me, the idea of searching from your command prompt or terminal stemmed from my repetitive need to search online for some form of information whilst in the midst of a programming endeavor. While there are many amazing API’s, SDK’s, and localized web-oriented frameworks allowing developers to interact with the web from their console, I found myself in need of a more general, simplistic approach to querying information hosted online from my local machine.\r\nOnce I stopped to think about my daily processes while developing locally and interacting with the internet, I quickly realized that there is a much larger frequency of instances where I am in need of browsing the web than I originally would have anticipated. Whether navigating to my web browser to google a new concept, review a Github pull request, or even launch a locally hosted shiny application, I found that I use my browsers constantly throughout the day.\r\nTo name a few examples:\r\nReviewing a new pull request on Github or searching my backlog of issues assigned to me\r\nSearching for new software or downloading a new version\r\nSearching my cloud storage drives for files or data\r\nSearching my emails for important information\r\nReviewing online documentation when learning something new\r\nRetrieving a forgotten API Key or account password\r\nChecking on and maintaining a hosted cloud service platform\r\nWatching a demo video on youtube for a new application\r\nChecking my RSS feeds and developer blogs to stay up to date on current news\r\nSearching google for a new library, concept, or framework\r\nAs you can see, there are a variety of instances where interacting with and querying the web has become a routine in our daily development workflows and learning processes.\r\nAdditionally, due to the lack of a more streamlined, self-contained approach to this reliance on the web while programming, I found myself easily distracted my all of the bells and whistles the internet and my browsers have to offer. Between all of the bookmarks, feeds, notifications and variety of browser extensions the simple process of leaving your code and opening your browser has much larger implications than most people realize.\r\nWhile this may seem like a minimal interruption to your programming workflow, the fact of the matter is that programming is a form of work which requires a very deep, specific environment and mindset in order to keep your development pipelines productive and efficient. In other words, programming is not easy and requires intense focus.\r\nTherefore, developers should do everything they can to avoid having to switch in and out of the various shallow contexts surrounding our everyday lives while attempting to perform a session of productive coding.\r\nDeveloping a Solution\r\nBrowser Search Engines\r\nTo provide a simple, yet powerful solution to the issues surrounding browsing the internet for necessary resources, I started with my personal browser settings.\r\nMost web browser providers facilitate a setting where you can configure your own custom configurations for creating search queries to specific web sites using your address bar.\r\nFor example, in Chrome if you navigate to Settings > Manage Search Engines you will see a list of default search engine providers such as google, bing, and yahoo as well as some auto-generated engines created by websites you have visited in the past such as Youtube or Medium.\r\nWhat most people do not realize is they can add add their own search engines and keywords also.\r\nFor example, if I want to search Github repositories querying with a specific keyword while filtering for only repositories categorized with the language R the query URL would be: https://github.com/search?q=%slanguage%3Ar.\r\nYou can produce this yourself by searching from Github and applying the filters yourself and replacing the term you searched for with %s, similar to the sprintf context. Lastly, assign a keyword of ghr and test it out by typing ghr in your address bar and pressing tab or enter. Now when you search it will direct you to Github R repositories!\r\nExample: Search Github for tidyverse with keyword ghr filtering for Language:R:\r\n\r\nnote that this is setup with the following in chrome://settings/searchEngines:\r\n\r\nBuilding on this framework I setup in my browser years ago, I decided to take it one step further by bringing the searching functionality to my personal R package browsr focusing on R-specific search engines (it can be quite difficult to search effectively for R resources filtering out everything else given R is only one letter).\r\nSetting up the Search Engines\r\nFor setting up the search engines all I needed to do was migrate my browser customized search engine URL’s into R by wrapping them in R functions which pass the %s syntax as a function argument.\r\nHere is a list of the search engines I have implemented so far and their functions:\r\nGeneral Search Function\r\nSearch Github\r\nSearch RSeek.org\r\nSearch Finzi’s R Site\r\nSearch the R Forum on Nabble\r\nSearch Google\r\nSearch R-Project Domain from Google\r\nSearch METACRAN\r\nExamples\r\nHere is a list of some common examples:\r\nGmail: https://mail.google.com/mail/ca/u/0/#apps/%s\r\nYouTube: https://www.youtube.com/results?search_query=%s&page={startPage?}&utm_source=opensearch\r\nFacebook: https://www.facebook.com/search/top/?q=%s&opensearch=1\r\nTwitter: https://twitter.com/search?q=%s\r\nSoundCloud: https://soundcloud.com/search?q=%s\r\nAmazon: https://www.amazon.in/s/ref=nb_sb_noss_2?url=search-alias%3Daps&field-keywords=%s\r\nSome may find it useful to create custom github queries for their Github accounts:\r\nYour personal Github repositories: https://github.com/<GITHUB_USERNAME>?tab=repositories&q=%s\r\nYour organizations Github repositories: https://github.com/search?q=org%3A<GITHUB_ORGANIZATIoN>+%s\r\nExample Tables\r\nGeneral\r\nSearch Engine\r\nKeyword\r\nQuery URL\r\nEdge Settings\r\nsettings\r\nedge://settings/?search=%s\r\nEdge History\r\nhist\r\nedge://history/all?q=%s\r\nGmail Inbox Search\r\ngmail\r\nhttps://inbox.google.com/search/%s\r\nGoogle Drive\r\ngdrive\r\nhttps://drive.google.com/drive/u/0/search?q=%s\r\nGithub\r\ngh\r\nhttps://github.com/search?q=%s&ref=opensearch\r\nGithub Gist\r\ngist\r\nhttps://gist.github.com/search?q=&ref=opensearch\r\nStackOverFlow\r\nstackoverflow\r\nhttps://stackoverflow.com/search?q=%s\r\nDev.to\r\ndevto\r\nhttps://dev.to/search?q=%s\r\nDevDocs\r\ndevdocs\r\nhttps://devdocs.io/#q=%s\r\nDeveloper Resources\r\nAnd some more general developer resources:\r\nSearch Engine\r\nKeyword\r\nQuery URL\r\nGithub\r\ngh\r\nhttps://github.com/search?q=%s&ref=opensearch\r\nGithub Gist\r\ngist\r\nhttps://gist.github.com/search?q=&ref=opensearch\r\nStackOverFlow\r\nstackoverflow\r\nhttps://stackoverflow.com/search?q=%s\r\nDev.to\r\ndevto\r\nhttps://dev.to/search?q=%s\r\nDevDocs\r\ndevdocs\r\nhttps://devdocs.io/#q=%s\r\nMozilla WebDocs\r\nmozdocs\r\nhttps://developer.mozilla.org/en-US/search?q=%s&w=3&qs=plugin\r\nR-Resources\r\nThe R-Project Website provides some useful search engines here:\r\n\r\n\r\nTaking these references as a starting point we can create some query URLs for searching R specifically:\r\nSearch Engine\r\nKeyword\r\nQuery URL\r\nR Site Search by Finzi\r\nrsite\r\nhttp://finzi.psych.upenn.edu/cgi-bin/namazu.cgi?query=%s&max=100&result=normal&sort=score&idxname=functions&idxname=views\r\nRSeek\r\nrseek\r\nhttps://www.rseek.org/?q=%s\r\nR Nabble Forum\r\nrnabble\r\nhttps://r.789695.n4.nabble.com/template/NamlServlet.jtp?macro=search_page&node=789695&query=%s\r\nAdvanced Google Search: R Project\r\nrproj\r\nhttps://www.google.com/search?q=%s&domains=r-project.org&sitesearch=r-project.org&btnG=Google+Search\r\nAdditional R\r\nAdditionally, I have created these R related search queries as well:\r\nSearch Engine\r\nKeyword\r\nQuery URL\r\nGithub - Language:R\r\nghr\r\nhttps://github.com/search?q=%slanguage%3Ar\r\nGithub Gist - Language:R\r\ngistr\r\nhttps://gist.github.com/search?q=%s+language%3Ar&ref=searchresults\r\nStackOverFlow - Tag:R\r\nstackoverflowr\r\nhttps://stackoverflow.com/search?q=%5Br%5D+%s\r\nMETACRAN\r\nmetacran\r\nhttps://www.r-pkg.org/search.html?q=%s\r\nDan Goldstein’s Site\r\ndanr\r\nhttp://www.dangoldstein.com/search_r.html?cx=partner-pub-8815643643661420%3Al9jc9v-e2vi&cof=FORID%3A10&ie=ISO-8859-1&q=%s&sa=Search&siteurl=www.dangoldstein.com%2Fsearch_r.html&ref=search.r-project.org%2F&ss=265j35153j3\r\nR Documentation\r\nrdocs\r\nhttp://rdocumentation.org/\r\nR Package Documentation - Packages\r\nrdrrpkg\r\nhttps://rdrr.io/find/?repos=cran%2Cbioc%2Crforge%2Cgithub&fuzzy_slug=%s\r\nRStudio Website\r\nrstudio\r\nhttps://rstudio.com/#stq=%s&stp=1\r\nR-Bloggers\r\nrbloggers\r\nhttps://cse.google.com/cse?cx=005359090438081006639%3Apaz69t-s8ua&ie=UTF-8&q=%s&sa=Go\r\nR Code\r\nOnline Reference: https://jimbrig.github.io/browsr/reference/search.html\r\nGeneral Search Engine\r\n\r\n\r\n#' Generalized Search and Search Engine Examples\r\n#'\r\n#' Use these functions to search the web directly from your browser,\r\n#' building advanced queries and supplying common useful R related domains.\r\n#'\r\n#' @param s string to search for (`%s` in the query URL)\r\n#' @param query_url string representing the URL to query; defaults to Google\r\n#'\r\n#' @name search\r\n#'\r\n#' @keywords search_engines\r\n#'\r\n#' @export\r\n#'\r\n#' @examples\r\n#' library(browsr)\r\n#' # default search on google\r\n#' search_online(\"polished.tech\")\r\n#'\r\n#' # search github (note: &ref=opensearch)\r\n#' search_online(\"polished\", \"https://github.com/search?q=%s&ref=opensearch\")\r\n#'\r\n#' # search Github with language:r, org:tychobra for 'polished' (note: '%3A' represents a ':')\r\n#' search_online(\"polished\", \"https://github.com/search?q=%s+language%3Ar+org%3Atychobra\")\r\nsearch_online <- function(s,\r\n                          query_url = \"https://google.com/search?q=\") {\r\n\r\n  url <- paste0(query_url, s)\r\n\r\n  utils::browseURL(url)\r\n\r\n}\r\n\r\n\r\n\r\nSearch Github\r\n\r\n\r\n#' Search Github\r\n#'\r\n#' Query Github's internal search engine.\r\n#'\r\n#' @param s string to search for\r\n#' @param type what to search for, see details for options\r\n#' @param language optional language filter\r\n#' @param topic optional topic filter\r\n#' @param user optional user filter\r\n#' @param org optional org filter\r\n#'\r\n#' @describeIn search\r\n#'\r\n#' @export\r\n#'\r\n#' @examples\r\n#' search_gh(\"websocket\", language = \"r\", topic = \"rshiny\")\r\n#'\r\n#' # search your org\r\n#' search_gh(\"polished\", org = \"tychobra\")\r\nsearch_gh <- function(s,\r\n                      type = \"all\",\r\n                      language = NULL,\r\n                      topic = NULL,\r\n                      user = NULL,\r\n                      org = NULL) {\r\n\r\n  types <- c(\"all\",\r\n             \"repo\",\r\n             \"code\",\r\n             \"commit\",\r\n             \"issue\",\r\n             \"discussion\",\r\n             \"package\",\r\n             \"marketplace\",\r\n             \"topic\",\r\n             \"wiki\",\r\n             \"user\")\r\n\r\n  match.arg(type, types)\r\n  type_query <- ifelse(type == \"all\", \"&ref=opensearch\", paste0(\"&type=\", type))\r\n  base_url <- \"https://github.com/search?q=\"\r\n  lang_query <- ifelse(is.null(language), \"\", paste0(\"+language%3A\", language))\r\n  topic_query <- ifelse(is.null(topic), \"\", paste0(\"+topic%3A\", topic))\r\n  user_query <- ifelse(is.null(user), \"\", paste0(\"+user%3A\", user))\r\n  org_query <- ifelse(is.null(org), \"\", paste0(\"org%3A\", org))\r\n  query <- paste0(s, \" \", lang_query, topic_query, user_query, org_query, type_query)\r\n\r\n  url <- paste0(base_url, query)\r\n\r\n  utils::browseURL(url)\r\n\r\n}\r\n\r\n\r\n\r\nRseek.org\r\n\r\n\r\n#' Search RSeek.org\r\n#'\r\n#' Query a search on [rseek.org](https://rseek.org/).\r\n#'\r\n#' @param s string to search for\r\n#' @export\r\n#'\r\n#' @describeIn search\r\n#'\r\n#' @references\r\n#' - <http://www.sashagoodman.com/>\r\nsearch_rseek <- function(s) {\r\n  url <- paste0(\"http://www.rseek.org/?q=\", s)\r\n  utils::browseURL(url)\r\n}\r\n\r\n\r\n\r\nSearch R Site via Finzi\r\n\r\n\r\n#' Search Finzi\r\n#'\r\n#' @param s string to search for\r\n#'\r\n#' @describeIn search\r\n#'\r\n#' @references\r\n#' - <http://finzi.psych.upenn.edu/search.html>\r\n#' - <http://finzi.psych.upenn.edu/search/manual.html#query>\r\n#'\r\n#' @export\r\nsearch_finzi <- function(s) {\r\n\r\n  url <- paste0(\r\n    \"http://finzi.psych.upenn.edu/cgi-bin/namazu.cgi?query=\",\r\n    s,\r\n    \"&max=100&result=normal&sort=score&idxname=functions&idxname=views\"\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\nSearch Nabble R Forum\r\n\r\n\r\n#' Search Nabble R Forum\r\n#'\r\n#' Query a search on the R Nabble Forum. Nabble is an innovative search engine\r\n#' for R messages.\r\n#'\r\n#' @describeIn search\r\n#'\r\n#' @param s string to search for\r\n#'\r\n#' @export\r\n#' @references\r\n#' - <https://cloud.r-project.org/search.html>\r\n#' - <http://n4.nabble.com/help/Answer.jtp?id=31>\r\nsearch_nabble <- function(s) {\r\n\r\n  url <- paste0(\r\n    \"https://r.789695.n4.nabble.com/template/NamlServlet.jtp?macro=search_page&node=789695&query=\", s\r\n  )\r\n\r\n  utils::browseURL(url)\r\n\r\n}\r\n\r\n\r\n\r\nSearch Google\r\n\r\n\r\n#' Search Google\r\n#'\r\n#' @describeIn search\r\n#'\r\n#' @param s string to search for\r\n#' @export\r\nsearch_google <- function(s) {\r\n  url <- paste0(\"https://www.google.com/search?q=\", s)\r\n  utils::browseURL(url)\r\n}\r\n\r\n\r\n\r\nSearch R Project Domain via Google\r\n\r\n\r\n#' Search R Project Domain on Google\r\n#'\r\n#' @param s string to search for\r\n#'\r\n#' @describeIn search\r\n#'\r\n#' @export\r\n#'\r\n#' @details See <https://cloud.r-project.org/search.html> which showcases Google's\r\n#'   advanced search feature to query only R-Project domain sites via the\r\n#'   [Google Search Engine](http://www.google.com/advanced_search).\r\nsearch_rproject <- function(s) {\r\n\r\n  url <- paste0(\r\n    \"https://www.google.com/search?q=\", s,\r\n    \"&domains=r-project.org&sitesearch=r-project.org&btnG=Google+Search\"\r\n  )\r\n\r\n  utils::browseURL(url)\r\n\r\n}\r\n\r\n\r\n\r\nSearch METACRAN\r\n\r\n\r\n#' Search METACRAN\r\n#'\r\n#' @param s string to search for\r\n#'\r\n#' @describeIn search\r\n#'\r\n#' @export\r\nsearch_metacran <- function(s) {\r\n\r\n  url <- paste0(\r\n    \"https://www.r-pkg.org/search.html?q=\", s)\r\n\r\n  utils::browseURL(url)\r\n\r\n}\r\n\r\n\r\n\r\nConcluding Remarks\r\nDownload the source code from the Github Repository.\r\nAlthough I do use other terminals, languages, and shells outside of the R environment, most of my development work is done within R and RStudio. Therefore, I chose R as my framework for implementing a set of utility functions to quickly perform advanced search queries online from a wide variety of search engine source domains.\r\nSimilar R Packages:\r\nsearcher\r\nwebsearcher\r\npackageFinder\r\ntools::CRAN_package_db() from the tools package\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-07-searching-from-r/images/magnifying_glass.jpg",
    "last_modified": "2020-12-07T12:18:02-05:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to Jim's Docs",
    "description": "Welcome to our new blog, Jim's Docs. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Nora Jones",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2020-12-07",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2020-12-07T12:09:12-05:00",
    "input_file": {}
  }
]
